
[{"content":" test # test # ","date":"7 January 2025","externalUrl":null,"permalink":"/","section":"","summary":"","title":"","type":"page"},{"content":" post test # 這是 post 區\n","date":"7 January 2025","externalUrl":null,"permalink":"/posts/","section":"","summary":"","title":"","type":"posts"},{"content":" 前言 🎤 # 使用者體驗（User Experience, UX）是應用程式設計中不可或缺的一環，而一個即時、直觀的反饋能夠讓使用者更安心、更愉快地操作✨。在這篇文章中，我們將介紹如何使用 Naive UI 提供的 useMessage，為操作增加提示彈窗，讓你的專案從「好用」變成「超好用」！(ゝ∀･)\n搭配 useMessage 的優勢 💡 # 傳送門 🌀 Naive UI Message\n即時反饋：讓使用者在操作後即刻獲得成功或失敗的回應。 更友好的提示：以視覺化的彈窗代替冷冰冰的 console.log。 簡單易用：只需一行程式碼，即可實現漂亮的提示彈窗。 使用步驟 🖥️ # 1. 安裝 Naive UI # 如果你的專案還沒有安裝 Naive UI，請先執行以下指令：\nnpm install naive-ui 2. 基本使用 useMessage # Naive UI 提供的 useMessage 是一個簡單的訊息提示工具，可以用於成功、失敗或警告等提示。使用前，請務必在 App.vue 或其他全域組件中掛載 NMessageProvider：\n```vue \u0026lt;script setup\u0026gt; import { NMessageProvider } from \u0026#39;naive-ui\u0026#39;; \u0026lt;/script\u0026gt; \u0026lt;template\u0026gt; \u0026lt;n-message-provider\u0026gt; \u0026lt;router-view /\u0026gt; \u0026lt;/n-message-provider\u0026gt; \u0026lt;/template\u0026gt; ･*･:≡(　ε:) 以下是基本範例\n\u0026lt;template\u0026gt; \u0026lt;n-button @click=\u0026#34;showMessage\u0026#34;\u0026gt;點我顯示訊息\u0026lt;/n-button\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script setup\u0026gt; import { useMessage } from \u0026#34;naive-ui\u0026#34;; const message = useMessage() const showMessage = () =\u0026gt; { message.info(\u0026#39;我是一般訊息\u0026#39;) message.success(\u0026#39;我是成功訊息\u0026#39;) message.error(\u0026#39;我是失敗訊息\u0026#39;) message.warning(\u0026#39;我是警告訊息\u0026#39;) } \u0026lt;/script\u0026gt; 3. 搭配 Firebase 功能提升使用者體驗 # 以下是如何在使用者驗證中加入彈窗提示的範例：\n邏輯檔案 # (1) 註冊功能 # // Login/service/registerService.js import { getAuth, createUserWithEmailAndPassword } from \u0026#34;firebase/auth\u0026#34;; const auth = getAuth(); export const registerUser = async (email, password) =\u0026gt; { try { const userCredential = await createUserWithEmailAndPassword(auth, email, password); return { success: true, user: userCredential.user }; } catch (error) { return { success: false, message: error.message }; } }; (2) 登入功能 # // Login/service/loginService.js import { getAuth, signInWithEmailAndPassword } from \u0026#34;firebase/auth\u0026#34;; const auth = getAuth(); export const loginUser = async (email, password) =\u0026gt; { try { const userCredential = await signInWithEmailAndPassword(auth, email, password); return { success: true, user: userCredential.user }; } catch (error) { return { success: false, message: error.message }; } }; (3) Google 登入 # // Login/service/authService.js import { getAuth, GoogleAuthProvider, signInWithPopup } from \u0026#34;firebase/auth\u0026#34;; const auth = getAuth(); export const loginWithGoogle = async () =\u0026gt; { try { const provider = new GoogleAuthProvider(); const userCredential = await signInWithPopup(auth, provider); return { success: true, user: userCredential.user }; } catch (error) { return { success: false, message: error.message }; } }; (4) 忘記密碼功能 # // Login/service/resetPasswordService.js import { getAuth, sendPasswordResetEmail } from \u0026#34;firebase/auth\u0026#34;; const auth = getAuth(); export const resetPassword = async (email) =\u0026gt; { try { await sendPasswordResetEmail(auth, email); return { success: true }; } catch (error) { return { success: false, message: error.message }; } }; (5) 登出功能 # // Login/service/logoutService.js import { getAuth, signOut } from \u0026#34;firebase/auth\u0026#34;; const auth = getAuth(); export const logoutUser = async () =\u0026gt; { try { await signOut(auth); return { success: true }; } catch (error) { return { success: false, message: error.message }; } }; 集中彈窗邏輯在 LoginPage.vue # 在 LoginPage.vue 中，統一處理所有彈窗邏輯，根據 Service 的回傳結果，使用 useMessage 顯示提示。\n\u0026lt;template\u0026gt; \u0026lt;n-input v-model=\u0026#34;email\u0026#34; placeholder=\u0026#34;輸入 Email\u0026#34; /\u0026gt; \u0026lt;n-input v-model=\u0026#34;password\u0026#34; type=\u0026#34;password\u0026#34; placeholder=\u0026#34;輸入密碼\u0026#34; /\u0026gt; \u0026lt;n-button @click=\u0026#34;handleRegister\u0026#34;\u0026gt;註冊\u0026lt;/n-button\u0026gt; \u0026lt;n-button @click=\u0026#34;handleLogin\u0026#34;\u0026gt;登入\u0026lt;/n-button\u0026gt; \u0026lt;n-button @click=\u0026#34;handleGoogleLogin\u0026#34;\u0026gt;Google 登入\u0026lt;/n-button\u0026gt; \u0026lt;n-button @click=\u0026#34;handleResetPassword\u0026#34;\u0026gt;忘記密碼\u0026lt;/n-button\u0026gt; \u0026lt;n-button @click=\u0026#34;handleLogout\u0026#34;\u0026gt;登出\u0026lt;/n-button\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script setup\u0026gt; import { ref } from \u0026#34;vue\u0026#34;; import { useMessage } from \u0026#34;naive-ui\u0026#34;; import { registerUser } from \u0026#34;./service/registerService.js\u0026#34;; import { loginUser } from \u0026#34;./service/loginService.js\u0026#34;; import { loginWithGoogle } from \u0026#34;./service/authService.js\u0026#34;; import { resetPassword } from \u0026#34;./service/resetPasswordService.js\u0026#34;; import { logoutUser } from \u0026#34;./service/logoutService.js\u0026#34;; const email = ref(\u0026#34;\u0026#34;); const password = ref(\u0026#34;\u0026#34;); const message = useMessage(); const handleRegister = async () =\u0026gt; { const result = await registerUser(email.value, password.value); if (result.success) { message.success(\u0026#39;註冊成功 🎉\u0026#39;); } else { message.error(\u0026#39;註冊失敗 💔\u0026#39;); console.error(result.message); } }; const handleLogin = async () =\u0026gt; { const result = await loginUser(email.value, password.value); if (result.success) { message.success(\u0026#39;登入成功 🎉\u0026#39;); } else { message.error(\u0026#39;登入失敗 💔\u0026#39;); console.error(result.message); } }; const handleGoogleLogin = async () =\u0026gt; { const result = await loginWithGoogle(); if (result.success) { message.success(\u0026#39;Google 登入成功 🎉\u0026#39;); } else { message.error(\u0026#39;Google 登入失敗 💔\u0026#39;); console.error(result.message); } }; const handleResetPassword = async () =\u0026gt; { const result = await resetPassword(email.value); if (result.success) { message.success(\u0026#39;密碼重設郵件已寄出 📩，請檢查你的信箱！\u0026#39;); } else { message.error(\u0026#39;密碼重設失敗 💔\u0026#39;); console.error(result.message); } }; const handleLogout = async () =\u0026gt; { const result = await logoutUser(); if (result.success) { message.success(\u0026#39;登出成功 👋\u0026#39;); } else { message.error(\u0026#39;登出失敗 💔\u0026#39;); console.error(result.message); } }; \u0026lt;/script\u0026gt; 結語 🎉 # 透過 Naive UI 的 useMessage，你可以輕鬆為使用者操作提供即時反饋，提升整體操作體驗。結合 Firebase Authentication，讓你的專案更友好、更專業！快來試試看吧！🚀\n","date":"7 January 2025","externalUrl":null,"permalink":"/posts/set_naive_usemessage/","section":"","summary":"","title":"用 Naive UI 的 useMessage 打造更友好的使用者操作體驗 🎉","type":"posts"},{"content":" 前言 🎤 # 在應用程式中，使用者驗證是不可缺的一環，而 Firebase Authentication 就像是開發者的魔法工具箱🪄！不僅可以快速實現 Email/密碼登入，還支援第三方登入（Google、Facebook 等），更貼心的是，它還內建了 忘記密碼 功能💡！\n今天就帶大家一步步實現這些功能，並在下一篇文章搭配 Naive UI 信息彈窗 提升使用者體驗，讓操作更加直覺、友好！✨（¯▿¯）\n前置作業 📌 # 1. 準備 Firebase 專案 # 登入 Firebase 官方網站，按下建立專案! 輸入你的酷酷名稱建立新專案(ﾉ\u0026gt;ω\u0026lt;)ﾉ 在「專案設定」中選擇平台建立應用程式 新增 Firebase SDK 將 Firebase 產生的 apiKey 複製起來！ 2. 安裝 Firebase 套件 # 在本地專案中安裝 Firebase 套件 npm install firebase 3. 設定 Firebase 環境 # 在專案中新增一個 firebase-config.js 檔案，將 Firebase 配置加入：\n// firebase-config.js import { initializeApp } from \u0026#34;firebase/app\u0026#34;; const firebaseConfig = { apiKey: \u0026#34;你的 API 金鑰\u0026#34;, authDomain: \u0026#34;你的專案域名\u0026#34;, projectId: \u0026#34;你的專案 ID\u0026#34;, storageBucket: \u0026#34;你的儲存空間\u0026#34;, messagingSenderId: \u0026#34;你的訊息傳送者 ID\u0026#34;, appId: \u0026#34;你的 App ID\u0026#34;, }; const app = initializeApp(firebaseConfig); export default app; 實際操作 🖥️ # 1. 實現 Email/密碼註冊功能 # 建立 registerService.js，實現註冊功能：\n// Login/service/registerService.js import { getAuth, createUserWithEmailAndPassword } from \u0026#34;firebase/auth\u0026#34;; const auth = getAuth(); export const registerUser = async (email, password) =\u0026gt; { try { const userCredential = await createUserWithEmailAndPassword(auth, email, password); console.log(\u0026#34;使用者註冊成功:\u0026#34;, userCredential.user); } catch (error) { console.error(\u0026#34;註冊失敗:\u0026#34;, error.message); } }; 在前端 LoginPage.vue 前端呼叫 registerUser()\n// Login/LoginPage.vue import { registerUser } from \u0026#34;./service/registerService.js\u0026#34;; const email = \u0026#34;test@example.com\u0026#34;; const password = \u0026#34;password123\u0026#34;; registerUser(email, password); 2. 實現 Email/密碼登入功能 # 在 loginService.js 中增加登入功能：\n// Login/service/loginService.js import { signInWithEmailAndPassword } from \u0026#34;firebase/auth\u0026#34;; export const loginUser = async (email, password) =\u0026gt; { try { const userCredential = await signInWithEmailAndPassword(auth, email, password); console.log(\u0026#34;使用者登入成功:\u0026#34;, userCredential.user); } catch (error) { console.error(\u0026#34;登入失敗:\u0026#34;, error.message); } }; 在前端 LoginPage.vue 前端呼叫 loginUser()\n// Login/LoginPage.vue import { loginUser } from \u0026#34;./service/loginService.js\u0026#34;; const email = \u0026#34;test@example.com\u0026#34;; const password = \u0026#34;password123\u0026#34;; loginUser(email, password); 3. 實現 Google 第三方登入 # 啟用 Firebase Google 登入後建立 authService.js，加入以下程式碼：\n// Login/service/authService.js import { GoogleAuthProvider, signInWithPopup } from \u0026#34;firebase/auth\u0026#34;; export const loginWithGoogle = async () =\u0026gt; { try { const provider = new GoogleAuthProvider(); const userCredential = await signInWithPopup(auth, provider); console.log(\u0026#34;Google 登入成功:\u0026#34;, userCredential.user); } catch (error) { console.error(\u0026#34;Google 登入失敗:\u0026#34;, error.message); } }; 在前端 LoginPage.vue 前端呼叫 loginWithGoogle()\n// Login/LoginPage.vue import { loginWithGoogle } from \u0026#34;./service/authService.js\u0026#34;; loginWithGoogle(); 4. 實現忘記密碼功能 # 新建 resetPasswordService.js 新增忘記密碼功能：\n// Login/service/resetPasswordService.js import { getAuth, sendPasswordResetEmail } from \u0026#34;firebase/auth\u0026#34;; export const resetPassword = async (email) =\u0026gt; { try { await sendPasswordResetEmail(auth, email); console.log(\u0026#34;重設密碼郵件已寄出\u0026#34;); } catch (error) { console.error(\u0026#34;密碼重設失敗:\u0026#34;, error.message); } }; 在前端 LoginPage.vue 前端呼叫 resetPassword()\nimport { resetPassword } from \u0026#34;./service/resetPasswordService.js\u0026#34;; resetPassword(\u0026#34;test@example.com\u0026#34;); 5. 實現登出功能 # 最後，實現登出功能：\nimport { signOut } from \u0026#34;firebase/auth\u0026#34;; export const logoutUser = async () =\u0026gt; { try { await signOut(auth); console.log(\u0026#34;使用者已登出\u0026#34;); } catch (error) { console.error(\u0026#34;登出失敗:\u0026#34;, error.message); } }; 測試與驗證 🔄 # 完成功能後，可以依以下步驟進行測試：\n註冊新使用者：檢查 Firebase 控制台是否新增使用者。 登入測試：使用 Email/密碼或 Google 登入，確認控制台有登入紀錄。 忘記密碼測試：輸入已註冊的 Email，檢查是否收到重設密碼郵件📩。 登出測試：確認會話已結束。 結語 🎉 # 透過 Firebase Authentication，我們不僅可以輕鬆實現多種登入功能，還能提供安全的密碼重設服務，讓使用者體驗大幅提升！🔥 快來試試吧，讓你的專案更加完美！ε٩(๑\u0026gt; ₃ \u0026lt;)۶з\n","date":"6 January 2025","externalUrl":null,"permalink":"/posts/set_firebase_authentication/","section":"","summary":"","title":"Firebase Authentication 教學：讓使用者登入變得輕而易舉 🔐","type":"posts"},{"content":" 前言 🎤 # 在做我的第一個專案時，我們最初用 Notion 當 API 文件，剛開始寫 API 時還會乖乖更新文檔📄，但隨著 API 越寫越多，更新文檔的事情就逐漸被拋諸腦後😅。\n而且在前後端分離的情況下，負責前端的組員常常對測試 API 一頭霧水🤔。這時，我靈光一閃，想起老師課堂上提到的超好用圖形化工具✨——Swagger！於是，我開始鑽研如何把 Swagger 引入專案，讓 API 文件和測試一舉搞定🎯！\n前置作業 📌 # 需要用到兩個套件 swagger-ui-express \u0026amp; swagger-autogen\n1. swagger-ui-express # 傳送門 🌀 swagger-ui-express\n什麼是 swagger-ui-express？🖥️\nswagger-ui-express 是一個方便易用的 Express 中介軟體，讓你輕鬆整合 Swagger UI 到你的 Express 應用程式中！✨ 它可以將你的 Swagger 文件以一個互動式的圖形介面展示出來，供開發者進行查閱和測試，徹底解決 API 文件難管理、難測試的痛點💡。\n為什麼選它？\n快速整合：幾行程式碼就能把 Swagger UI 加入專案🔧。 互動式測試：支援直接從瀏覽器發送請求測試 API 功能🚀。 開發者友好：讓團隊中的每個人（不只後端開發者！）都能方便理解和使用 API📖。 2. swagger-autogen # 傳送門 🌀 swagger-autogen 官方文檔 📄 Quick Start\n什麼是 swagger-autogen？✨\nswagger-autogen 是一個專為開發者設計的工具包，可以自動生成符合 Swagger 規範的 API 文件📄！只需撰寫簡單的註解，它就能快速掃描你的程式碼，幫助你生成完整的 Swagger 文件，還能直接與 Swagger UI 整合，讓 API 文件不僅即時更新，還可以用於互動式測試🚀。\n為什麼選擇它？\n省時省力：免手動撰寫 JSON 格式的 API 文件。 高度自動化：從程式碼註解中自動提取路由資訊📌。 即時測試：結合 Swagger UI，讓 API 測試變得超方便🔧。 實際操作 🖥️ # 1. 安裝套件至你的 express 專案 # npm install swagger-ui-express npm install swagger-autogen 2. 設定 Swagger 自動生成檔案 # 在專案根目錄中，建立一個 swagger.js 檔案，設定 swagger-autogen 來生成 Swagger 文件。\nimport swaggerAutogen from \u0026#34;swagger-autogen\u0026#34;; const doc = { info: { title: \u0026#34;我的 API 寶庫\u0026#34;, description: \u0026#34;我把所有的 API 都放在 localhost:3030 了，去尋找吧！\u0026#34;, }, host: \u0026#34;localhost:3030\u0026#34;, }; const outputFile = \u0026#34;./swagger-output.json\u0026#34;; const routes = [\u0026#34;./app.js\u0026#34;]; swaggerAutogen()(outputFile, routes, doc); require 的寫法只要把 import 換掉就好，剩下相同\nconst swaggerAutogen = require(\u0026#39;swagger-autogen\u0026#39;)(); 執行它，一鍵生成 swagger-output.json！✨\nnode swagger.js 3. 整合 Swagger UI 到 Express 專案 # 在 app.js 中加入以下程式碼：\nimport express from \u0026#34;express\u0026#34;; const app = express(); // swagger import swaggerUi from \u0026#34;swagger-ui-express\u0026#34;; import fs from \u0026#34;fs\u0026#34;; const swaggerDocument = JSON.parse( fs.readFileSync(new URL(\u0026#34;./swagger-output.json\u0026#34;, import.meta.url), \u0026#34;utf-8\u0026#34;) ); app.use(\u0026#34;/api-docs\u0026#34;, swaggerUi.serve, swaggerUi.setup(swaggerDocument)); 如果不是使用 ES6 則是加入：\nconst express = require(\u0026#39;express\u0026#39;); const app = express(); // swagger const swaggerUi = require(\u0026#39;swagger-ui-express\u0026#39;); const swaggerFile = require(\u0026#39;./swagger-output.json\u0026#39;); // 引入剛生成的 JSON 文件 app.use(\u0026#39;/api-docs\u0026#39;, swaggerUi.serve, swaggerUi.setup(swaggerFile)); // 路徑可自訂，例如 /docs 伺服器啟動後，打開瀏覽器，輸入 http://localhost:3000/api-docs 你的互動式 API 文件就此誕生啦！🎉\n4. 在路由中加入註解 📜 # 為了讓 swagger-autogen 能正確提取 API 資訊，會需要在路由檔案中撰寫註解，例如：\nGET router.get( \u0026#34;/:userId\u0026#34;, /* #swagger.tags = [\u0026#39;Cart\u0026#39;] */ /* #swagger.description = \u0026#34;取得購物車所有商品資料\u0026#34; */ /* #swagger.responses[200] = { schema: { \u0026#34;status\u0026#34;: 200, \u0026#34;message\u0026#34;: \u0026#34;購物車成功取得資料\u0026#34;, \u0026#34;data\u0026#34;: { \u0026#34;cartItems\u0026#34;: [ { \u0026#34;id\u0026#34;: 115, \u0026#34;cart_id\u0026#34;: 5, \u0026#34;created_at\u0026#34;: \u0026#34;2025-01-01T04:57:32.661Z\u0026#34;, \u0026#34;is_selected\u0026#34;: false, }, description: \u0026#34;成功取得資料\u0026#34; } */ CartController.fetchCartByUserId ); POST router.post( \u0026#34;/:userId\u0026#34;, /* #swagger.tags = [\u0026#39;Cart\u0026#39;] */ /* #swagger.description = \u0026#34;新增商品至購物車\u0026#34; */ /*\t#swagger.parameters[\u0026#39;obj\u0026#39;] = { in: \u0026#39;body\u0026#39;, description: \u0026#39;新增商品\u0026#39;, required: true, schema: { \u0026#34;activityId\u0026#34;: 34 } } */ /* #swagger.responses[201] = { schema: { \u0026#34;status\u0026#34;: 201, \u0026#34;message\u0026#34;: \u0026#34;成功新增至購物車\u0026#34;, \u0026#34;data\u0026#34;: { \u0026#34;id\u0026#34;: 115, \u0026#34;cart_id\u0026#34;: 5, \u0026#34;activity_id\u0026#34;: 34, \u0026#34;created_at\u0026#34;: \u0026#34;2025-01-01T04:57:32.661Z\u0026#34;, \u0026#34;is_selected\u0026#34;: false } }, description: \u0026#34;成功新增至購物車\u0026#34; } */ CartController.addActivityToCart ); 註釋規範與格式可以前往作者的 GitHub 上參閱範例\n範例 📚 Advanced Example\n5. 更新文件並測試 🔄 # 每次更新 API 或新增路由時，只需重新執行 node swagger.js，就能生成最新的 Swagger 文件！接著在 /api-docs 路徑中進行互動式測試，快速驗證 API 功能是否正常運作🚀。\n","date":"5 January 2025","externalUrl":null,"permalink":"/posts/set_swagger/","section":"","summary":"","title":"為 Express 專案打造互動式 Swagger API 文檔 🌐","type":"posts"},{"content":"這裡使用的是 https://blowfish.page/zh-cn/ 🐡\n也可以前往 https://themes.gohugo.io/ 尋找更多主題 ✨\n使用 git 來安裝 # 如何搭建 Hugo 網站\n需先將剛剛建立的 Hugo 專案推送至 git repo\n進入剛才創建的網站目錄 mywebsite ，將 Blowfish 新增為子模組\ncd mywebsite git submodule add -b main https://github.com/nunocoracao/blowfish.git themes/blowfish 將根目錄裡存在的 hugo.toml 檔案刪除\n因為之後都會用到這個主題的 .toml 檔案來跑，如果不刪掉預設的檔案的話本地伺服器會無法 run 起來 輸入下面指令在本地伺服器測試是否有問題\nhugo server -t blowfish //這裡是主題名稱可替換 更新主題 # 可以使用 git 指令更新，只要執行以下指令，最新版的主題將會下載到本地倉庫\ngit submodule update --remote --merge ","date":"3 January 2025","externalUrl":null,"permalink":"/posts/set_theme/","section":"","summary":"","title":"使用 Git 安裝並設置 Hugo 主題 🛠️","type":"posts"},{"content":"","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"},{"content":"","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"}]